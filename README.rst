.. image:: https://img.shields.io/pypi/v/cone.tokens.svg
    :target: https://pypi.python.org/pypi/cone.tokens
    :alt: Latest PyPI version

.. image:: https://img.shields.io/pypi/dm/cone.tokens.svg
    :target: https://pypi.python.org/pypi/cone.tokens
    :alt: Number of PyPI downloads

.. image:: https://github.com/conestack/cone.tokens/actions/workflows/python-package.yml/badge.svg
    :target: https://github.com/conestack/cone.tokens/actions/workflows/python-package.yml
    :alt: Package build

.. image:: https://coveralls.io/repos/github/bluedynamics/cone.tokens/badge.svg?branch=master
    :target: https://coveralls.io/github/bluedynamics/cone.tokens?branch=master

This package provides a unique token generator for ``cone.app``.

Features:

* QR Code generation
* API for token generation


API
===

``cone.tokens.browser.token`` provides a form for token generation as well as
json views.

Schema: URL/uuid/{request}
 Example: www.example.com/b6af6ca1-c4a4-4e74-82da-de81de8f18ae/consume_token

add_token
---------

  ``add_token`` is for generating a new token.

  It expects a ``POST`` request.

  Params: ``valid_from``, ``valid_to``, ``usage_count``, ``lock_time``

Results
^^^^^^^
    
    ``success``: True or False

    ``token_uid``: on success the token uid is returned

    ``message``: on failure the error message is returned

Errors
^^^^^^
    
    ``TokenAPIError``: if a param is missing 

    ``TokenValueError``: if a param has an invalid value
    
    ``Exception``: if something else goes wrong


consume_token
-------------

  ``consume_token`` is for consuming a token.

  It expects a ``GET`` request.

  Params: ``token_uid``

Results
^^^^^^^
    
    ``success``: True or False

    ``message``: on failure the error message is returned

Errors
^^^^^^
    
    ``TokenAPIError``: if a param is missing 

    ``TokenValueError``: if a param has an invalid value
    
    ``Exception``: if something else goes wrong


edit_token
----------

  ``edit_token`` is for editing a token.

  It expects a ``POST`` request.

  Params: ``token_uid``, ``valid_from``, ``valid_to``, ``usage_count``, ``lock_time``

Results
^^^^^^^
    
    ``success``: True or False

    ``message``: on failure the error message is returned

Errors
^^^^^^
    
    ``TokenAPIError``: if a param is missing 

    ``TokenValueError``: if a param has an invalid value
    
    ``Exception``: if something else goes wrong


delete_token
------------

  ``delete_token`` is for deleting a token.

  It expects a ``POST`` request.

  Params: ``token_uid``

Results
^^^^^^^
    
    ``success``: True or False

    ``message``: on failure the error message is returned

Errors
^^^^^^
    
    ``TokenAPIError``: if a param is missing 

    ``TokenValueError``: if a param has an invalid value
    
    ``Exception``: if something else goes wrong


QR Code
=======

``TokenTile`` provides a QR Code generated by `qrcode <https://github.com/lincolnloop/python-qrcode>`_.


Contributors
============

- Robert Niederreiter
- Torben Baumgartner
